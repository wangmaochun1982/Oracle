删除索引
数据量评估，确定分批字段
测试插入
分批插入
校验
恢复索引

1.alter table TABLENAME nologging;--归档模式必须设置，最后logging
2.insert /*+ Append */ into TABLENAME(......)  --和/*+ Append */  配合效果最好

/*
append只在insert … select …中起作用，像insert /*+ append */ into t values(…)这类的语句是不起作用的。在update、delete操作中，append也不起作用。
*/

--只有多次插入同一个表时才需要分批插入
--若大表非要分批插入可以找到分布均衡的关键字，然后建立索引，在分批插入

········································································································································

大数据快速更新（游标分批提交).txt
--【避免回滚段过大】
--删除索引，最后恢复索引
--分批插入
DECLARE
CURSOR c1 IS 
        SELECT ROWID row_id 
          FROM ts_batchcode WHERE dr=0 
          order by rowid;
c_commit CONSTANT PLS_INTEGER := 10000;
--CONSTANT 变量
--PLS_INTEGER可以存储一个有符号的整形值
BEGIN
  FOR c1rec IN c1 LOOP
        insert into tmp111 select * from ts_batchcode a
          WHERE a.ROWID = c1rec.row_id;
        IF (MOD(c1%ROWCOUNT,c_commit) = 0)
        THEN
          COMMIT;
        END IF;
  END LOOP;
  COMMIT;
END;
/


--分批update
DECLARE
CURSOR c1 IS 
        SELECT ROWID row_id 
          FROM CPCOLLECTION --更新目标表
          order by rowid;
c_commit CONSTANT PLS_INTEGER := 10000;
--CONSTANT 变量
--PLS_INTEGER可以存储一个有符号的整形值
BEGIN
  FOR c1rec IN c1 LOOP
        update CPCOLLECTION a set ...... 
        where ......
          and a.rowid=c1rec.row_id;
        IF (MOD(c1%ROWCOUNT,c_commit) = 0)
        THEN
          COMMIT;
        END IF;
  END LOOP;
  COMMIT;
END;
/



--分批删除gl_detail垃圾数据
DECLARE
CURSOR c1 IS 
        SELECT /*+ parallel(gl_detail) */ ROWID row_id 
          FROM gl_detail 
          WHERE dr=1 order by rowid;
c_commit CONSTANT PLS_INTEGER := 10000;
BEGIN
  FOR c1rec IN c1 LOOP
        DELETE FROM gl_detail
          WHERE ROWID = c1rec.row_id;
        IF (MOD(c1%ROWCOUNT,c_commit) = 0)
        THEN
          COMMIT;
        END IF;
  END LOOP;
  COMMIT;
END;
/
